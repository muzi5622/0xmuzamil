---
import { ClientRouter } from "astro:transitions";
import { PUBLIC_GOOGLE_SITE_VERIFICATION } from "astro:env/client";
import { SITE } from "@/config";
import "@/styles/global.css";
import Analytics from "@vercel/analytics/astro";

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  ogImage = SITE.ogImage ? `/${SITE.ogImage}` : "/og.png",
  canonicalURL = new URL(Astro.url.pathname, Astro.site),
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(ogImage, Astro.site);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  image: `${socialImageURL}`,
  datePublished: `${pubDatetime?.toISOString()}`,
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [
    {
      "@type": "Person",
      name: `${author}`,
      ...(profile && { url: profile }),
    },
  ],
};
---

<!doctype html>
<html
  dir={SITE.dir}
  lang={`${SITE.lang ?? "en"}`}
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- âœ… Fixed: Single canonical tag only -->
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {pubDatetime && (
      <meta property="article:published_time" content={pubDatetime.toISOString()} />
    )}
    {modDatetime && (
      <meta property="article:modified_time" content={modDatetime.toISOString()} />
    )}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImageURL} />

    <!-- Google JSON-LD Structured data -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(structuredData)}
    />

    <!-- Enable RSS feed auto-discovery -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title={SITE.title}
      href={new URL("rss.xml", Astro.site)}
    />

    <!-- Theme & Verification -->
    <meta name="theme-color" content="#000000" />
    {PUBLIC_GOOGLE_SITE_VERIFICATION && (
      <meta
        name="google-site-verification"
        content={PUBLIC_GOOGLE_SITE_VERIFICATION}
      />
    )}

    <!-- Google Analytics -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-63XWFN2EZ7"
    ></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-63XWFN2EZ7");
    </script>

    <ClientRouter />
    <script is:inline src="/toggle-theme.js"></script>
  </head>

  <body>
    <slot />
    <Analytics />

    <!-- Cleanup for third-party injected scripts -->
    <script is:inline>
      (function () {
        const adHosts = ["highperformanceformat.com", "effectivegatecpm.com"];
        function shouldHandle(src) {
          if (!src) return false;
          return adHosts.some((h) => src.includes(h));
        }
        function reexecuteScripts(root = document) {
          try {
            const scripts = Array.from(root.querySelectorAll("script[src]"));
            for (const s of scripts) {
              const src = s.getAttribute("src");
              if (!shouldHandle(src)) continue;
              if (s.dataset.__ad_ran) continue;
              const newScript = document.createElement("script");
              for (const attr of s.attributes) {
                if (attr.name === "src") continue;
                newScript.setAttribute(attr.name, attr.value);
              }
              newScript.src = src;
              newScript.async = s.async;
              newScript.dataset.__ad_ran = "1";
              s.parentNode?.insertBefore(newScript, s);
              s.parentNode?.removeChild(s);
            }
          } catch (err) {
            console.error("reexecuteScripts error", err);
          }
        }
        if (document.readyState === "loading") {
          document.addEventListener("DOMContentLoaded", () => reexecuteScripts(document));
        } else {
          reexecuteScripts(document);
        }
        document.addEventListener("astro:after-swap", () => reexecuteScripts(document));
      })();
    </script>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
